
prjct9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005188  08005188  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005190  08005190  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  2000000c  080051a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011bc  080051a4  000211bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f14  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222d  00000000  00000000  00032f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00035180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00036260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244ac  00000000  00000000  00037278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012856  00000000  00000000  0005b724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e85eb  00000000  00000000  0006df7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e4  00000000  00000000  001565b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005100 	.word	0x08005100

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005100 	.word	0x08005100

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_TIM_PeriodElapsedCallback>:
char cBuff[100];
int adc_val;
int c = 0;
volatile uint32_t tempo = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f8:	d104      	bne.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x1c>
		tempo++;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	4a03      	ldr	r2, [pc, #12]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000502:	6013      	str	r3, [r2, #0]
	}
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	200011b4 	.word	0x200011b4

08000514 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	adc_val = buffer;
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <HAL_ADC_ConvCpltCallback+0x24>)
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <HAL_ADC_ConvCpltCallback+0x28>)
 8000520:	601a      	str	r2, [r3, #0]
	c++;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <HAL_ADC_ConvCpltCallback+0x2c>)
 800052a:	6013      	str	r3, [r2, #0]
	/*
	 HAL_UART_Transmit(&huart2, (uint8_t*) cBuff, strlen(cBuff),
	 HAL_MAX_DELAY);
	 */

}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	200001a8 	.word	0x200001a8
 800053c:	200011ac 	.word	0x200011ac
 8000540:	200011b0 	.word	0x200011b0

08000544 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000548:	f000 fbb9 	bl	8000cbe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800054c:	f000 f84c 	bl	80005e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000550:	f000 f998 	bl	8000884 <MX_GPIO_Init>
	MX_DMA_Init();
 8000554:	f000 f978 	bl	8000848 <MX_DMA_Init>
	MX_ADC1_Init();
 8000558:	f000 f88c 	bl	8000674 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 800055c:	f000 f944 	bl	80007e8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000560:	f000 f8ee 	bl	8000740 <MX_TIM2_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (tempo < 1) {
 8000564:	e015      	b.n	8000592 <main+0x4e>
			HAL_TIM_Base_Start_IT(&htim2);
 8000566:	4819      	ldr	r0, [pc, #100]	; (80005cc <main+0x88>)
 8000568:	f003 fb88 	bl	8003c7c <HAL_TIM_Base_Start_IT>

			HAL_GPIO_WritePin( GPIOA, OnOff_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f002 f96f 	bl	8002858 <HAL_GPIO_WritePin>
			HAL_ADC_Start_DMA(&hadc1, &buffer, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	4914      	ldr	r1, [pc, #80]	; (80005d0 <main+0x8c>)
 800057e:	4815      	ldr	r0, [pc, #84]	; (80005d4 <main+0x90>)
 8000580:	f000 ff38 	bl	80013f4 <HAL_ADC_Start_DMA>
			HAL_GPIO_WritePin( GPIOA, OnOff_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f002 f963 	bl	8002858 <HAL_GPIO_WritePin>
		while (tempo < 1) {
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0x94>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0e5      	beq.n	8000566 <main+0x22>
		}
		tempo = 0;
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <main+0x94>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]

		itoa(c, cBuff, 10);
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <main+0x98>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	220a      	movs	r2, #10
 80005a6:	490e      	ldr	r1, [pc, #56]	; (80005e0 <main+0x9c>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f004 fd5d 	bl	8005068 <itoa>
		HAL_UART_Transmit(&huart2, (uint8_t*) cBuff, strlen(cBuff),
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x9c>)
 80005b0:	f7ff fe10 	bl	80001d4 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	4908      	ldr	r1, [pc, #32]	; (80005e0 <main+0x9c>)
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0xa0>)
 80005c0:	f004 f84c 	bl	800465c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		c = 0;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <main+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
		while (tempo < 1) {
 80005ca:	e7e2      	b.n	8000592 <main+0x4e>
 80005cc:	200000d8 	.word	0x200000d8
 80005d0:	200001a8 	.word	0x200001a8
 80005d4:	20000028 	.word	0x20000028
 80005d8:	200011b4 	.word	0x200011b4
 80005dc:	200011b0 	.word	0x200011b0
 80005e0:	20001148 	.word	0x20001148
 80005e4:	20000124 	.word	0x20000124

080005e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	; 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fd38 	bl	800506c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800060a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060e:	f002 f949 	bl	80028a4 <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000618:	f000 f974 	bl	8000904 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061c:	2310      	movs	r3, #16
 800061e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000628:	2360      	movs	r3, #96	; 0x60
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f98b 	bl	8002950 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x5c>
		Error_Handler();
 8000640:	f000 f960 	bl	8000904 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000658:	463b      	mov	r3, r7
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fd8b 	bl	8003178 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x84>
		Error_Handler();
 8000668:	f000 f94c 	bl	8000904 <Error_Handler>
	}
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_ADC1_Init+0xc0>)
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <MX_ADC1_Init+0xc4>)
 800068e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <MX_ADC1_Init+0xc0>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_ADC1_Init+0xc0>)
 8000698:	2210      	movs	r2, #16
 800069a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <MX_ADC1_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 3;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006bc:	2203      	movs	r2, #3
 80006be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <MX_ADC1_Init+0xc0>)
 80006f2:	f000 fd33 	bl	800115c <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x8c>
		Error_Handler();
 80006fc:	f000 f902 	bl	8000904 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_ADC1_Init+0xc8>)
 8000702:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000704:	2306      	movs	r3, #6
 8000706:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000708:	2307      	movs	r3, #7
 800070a:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070c:	237f      	movs	r3, #127	; 0x7f
 800070e:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000710:	2304      	movs	r3, #4
 8000712:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_ADC1_Init+0xc0>)
 800071e:	f000 ff01 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xb8>
		Error_Handler();
 8000728:	f000 f8ec 	bl	8000904 <Error_Handler>

	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000028 	.word	0x20000028
 8000738:	50040000 	.word	0x50040000
 800073c:	04300002 	.word	0x04300002

08000740 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_TIM2_Init+0xa0>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000764:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 4;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_TIM2_Init+0xa0>)
 8000768:	2204      	movs	r2, #4
 800076a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_TIM2_Init+0xa0>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000000;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM2_Init+0xa0>)
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <MX_TIM2_Init+0xa4>)
 8000776:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_TIM2_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_TIM2_Init+0xa0>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <MX_TIM2_Init+0xa0>)
 8000786:	f003 fad5 	bl	8003d34 <HAL_TIM_IC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000790:	f000 f8b8 	bl	8000904 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	480f      	ldr	r0, [pc, #60]	; (80007e0 <MX_TIM2_Init+0xa0>)
 80007a4:	f003 fe80 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x72>
			!= HAL_OK) {
		Error_Handler();
 80007ae:	f000 f8a9 	bl	8000904 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_TIM2_Init+0xa0>)
 80007ca:	f003 fc29 	bl	8004020 <HAL_TIM_IC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x98>
		Error_Handler();
 80007d4:	f000 f896 	bl	8000904 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000d8 	.word	0x200000d8
 80007e4:	000f4240 	.word	0x000f4240

080007e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART2_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART2_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x58>)
 800082c:	f003 fec8 	bl	80045c0 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000836:	f000 f865 	bl	8000904 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000124 	.word	0x20000124
 8000844:	40004400 	.word	0x40004400

08000848 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_DMA_Init+0x38>)
 8000850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <MX_DMA_Init+0x38>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6493      	str	r3, [r2, #72]	; 0x48
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_DMA_Init+0x38>)
 800085c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	200b      	movs	r0, #11
 800086c:	f001 fc4b 	bl	8002106 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000870:	200b      	movs	r0, #11
 8000872:	f001 fc64 	bl	800213e <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_GPIO_Init+0x7c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <MX_GPIO_Init+0x7c>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_GPIO_Init+0x7c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_GPIO_Init+0x7c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_GPIO_Init+0x7c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_GPIO_Init+0x7c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OnOff_GPIO_Port, OnOff_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f001 ffc0 	bl	8002858 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OnOff_Pin */
	GPIO_InitStruct.Pin = OnOff_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(OnOff_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f001 fe36 	bl	8002564 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000

08000904 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0a4      	sub	sp, #144	; 0x90
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2268      	movs	r2, #104	; 0x68
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f004 fb77 	bl	800506c <memset>
  if(hadc->Instance==ADC1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a3b      	ldr	r2, [pc, #236]	; (8000a70 <HAL_ADC_MspInit+0x118>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d16f      	bne.n	8000a68 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000988:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800098c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800098e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000992:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800099c:	2310      	movs	r3, #16
 800099e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009a0:	2307      	movs	r3, #7
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fe02 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80009c2:	f7ff ff9f 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <HAL_ADC_MspInit+0x11c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <HAL_ADC_MspInit+0x11c>)
 80009cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <HAL_ADC_MspInit+0x11c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <HAL_ADC_MspInit+0x11c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a24      	ldr	r2, [pc, #144]	; (8000a74 <HAL_ADC_MspInit+0x11c>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <HAL_ADC_MspInit+0x11c>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009fa:	230b      	movs	r3, #11
 80009fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481a      	ldr	r0, [pc, #104]	; (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a0e:	f001 fda9 	bl	8002564 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a14:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <HAL_ADC_MspInit+0x128>)
 8000a16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a4e:	f001 fb91 	bl	8002174 <HAL_DMA_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000a58:	f7ff ff54 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a60:	651a      	str	r2, [r3, #80]	; 0x50
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3790      	adds	r7, #144	; 0x90
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	50040000 	.word	0x50040000
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000800 	.word	0x48000800
 8000a7c:	20000090 	.word	0x20000090
 8000a80:	40020008 	.word	0x40020008

08000a84 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa4:	d130      	bne.n	8000b08 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <HAL_TIM_IC_MspInit+0x8c>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_TIM_IC_MspInit+0x8c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_TIM_IC_MspInit+0x8c>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_TIM_IC_MspInit+0x8c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_TIM_IC_MspInit+0x8c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_TIM_IC_MspInit+0x8c>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f001 fd36 	bl	8002564 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	201c      	movs	r0, #28
 8000afe:	f001 fb02 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b02:	201c      	movs	r0, #28
 8000b04:	f001 fb1b 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0a4      	sub	sp, #144	; 0x90
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2268      	movs	r2, #104	; 0x68
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 fa99 	bl	800506c <memset>
  if(huart->Instance==USART2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <HAL_UART_MspInit+0xb0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d13a      	bne.n	8000bba <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fd35 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b5c:	f7ff fed2 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b64:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b90:	230c      	movs	r3, #12
 8000b92:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f001 fcd5 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3790      	adds	r7, #144	; 0x90
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f8a6 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA1_Channel1_IRQHandler+0x10>)
 8000c26:	f001 fbbd 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000090 	.word	0x20000090

08000c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <TIM2_IRQHandler+0x10>)
 8000c3a:	f003 f8d2 	bl	8003de2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000d8 	.word	0x200000d8

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f004 f9a9 	bl	8004ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc51 	bl	8000544 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb0:	08005198 	.word	0x08005198
  ldr r2, =_sbss
 8000cb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cb8:	200011bc 	.word	0x200011bc

08000cbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_IRQHandler>

08000cbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f001 fa11 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 f80e 	bl	8000cf0 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff fe16 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d023      	beq.n	8000d4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_InitTick+0x70>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_InitTick+0x6c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fa1d 	bl	800215a <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10f      	bne.n	8000d46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d809      	bhi.n	8000d40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f001 f9e7 	bl	8002106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0x74>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e007      	b.n	8000d50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e004      	b.n	8000d50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e001      	b.n	8000d50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200011b8 	.word	0x200011b8

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200011b8 	.word	0x200011b8

08000da8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3360      	adds	r3, #96	; 0x60
 8000e22:	461a      	mov	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <LL_ADC_SetOffset+0x44>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	03fff000 	.word	0x03fff000

08000e58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3360      	adds	r3, #96	; 0x60
 8000e66:	461a      	mov	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3360      	adds	r3, #96	; 0x60
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000eae:	bf00      	nop
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	615a      	str	r2, [r3, #20]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3330      	adds	r3, #48	; 0x30
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	211f      	movs	r1, #31
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0e9b      	lsrs	r3, r3, #26
 8000f3e:	f003 011f 	and.w	r1, r3, #31
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b087      	sub	sp, #28
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3314      	adds	r3, #20
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	0e5b      	lsrs	r3, r3, #25
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	0d1b      	lsrs	r3, r3, #20
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2107      	movs	r1, #7
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0d1b      	lsrs	r3, r3, #20
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0318 	and.w	r3, r3, #24
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fd8:	40d9      	lsrs	r1, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	0007ffff 	.word	0x0007ffff

08000ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800100c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6093      	str	r3, [r2, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001034:	d101      	bne.n	800103a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800105c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001084:	d101      	bne.n	800108a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <LL_ADC_IsEnabled+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_ADC_IsEnabled+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010fa:	f043 0204 	orr.w	r2, r3, #4
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	2b04      	cmp	r3, #4
 8001120:	d101      	bne.n	8001126 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b08      	cmp	r3, #8
 8001146:	d101      	bne.n	800114c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e12f      	b.n	80013d6 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	2b00      	cmp	r3, #0
 8001182:	d109      	bne.n	8001198 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fbe7 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff3f 	bl	8001020 <LL_ADC_IsDeepPowerDownEnabled>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff25 	bl	8000ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff5a 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d115      	bne.n	80011ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff3e 	bl	8001048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011cc:	4b84      	ldr	r3, [pc, #528]	; (80013e0 <HAL_ADC_Init+0x284>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	4a84      	ldr	r2, [pc, #528]	; (80013e4 <HAL_ADC_Init+0x288>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	3301      	adds	r3, #1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e0:	e002      	b.n	80011e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff3c 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f043 0210 	orr.w	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff75 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 8001224:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80c8 	bne.w	80013c4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80c4 	bne.w	80013c4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001244:	f043 0202 	orr.w	r2, r3, #2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <LL_ADC_IsEnabled>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10b      	bne.n	8001274 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800125c:	4862      	ldr	r0, [pc, #392]	; (80013e8 <HAL_ADC_Init+0x28c>)
 800125e:	f7ff ff2f 	bl	80010c0 <LL_ADC_IsEnabled>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4619      	mov	r1, r3
 800126e:	485f      	ldr	r0, [pc, #380]	; (80013ec <HAL_ADC_Init+0x290>)
 8001270:	f7ff fd9a 	bl	8000da8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7e5b      	ldrb	r3, [r3, #25]
 8001278:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800127e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001284:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800128a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001292:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d106      	bne.n	80012b0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	3b01      	subs	r3, #1
 80012a8:	045b      	lsls	r3, r3, #17
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_ADC_Init+0x294>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	430b      	orrs	r3, r1
 80012de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff12 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 80012ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff1f 	bl	8001134 <LL_ADC_INJ_IsConversionOngoing>
 80012f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d140      	bne.n	8001380 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d13d      	bne.n	8001380 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7e1b      	ldrb	r3, [r3, #24]
 800130c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800130e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001316:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001326:	f023 0306 	bic.w	r3, r3, #6
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	430b      	orrs	r3, r1
 8001332:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800133a:	2b01      	cmp	r3, #1
 800133c:	d118      	bne.n	8001370 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001354:	4311      	orrs	r1, r2
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001360:	430a      	orrs	r2, r1
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	e007      	b.n	8001380 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10c      	bne.n	80013a2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f023 010f 	bic.w	r1, r3, #15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
 80013a0:	e007      	b.n	80013b2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 020f 	bic.w	r2, r2, #15
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f023 0303 	bic.w	r3, r3, #3
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	659a      	str	r2, [r3, #88]	; 0x58
 80013c2:	e007      	b.n	80013d4 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	f043 0210 	orr.w	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000
 80013e4:	053e2d63 	.word	0x053e2d63
 80013e8:	50040000 	.word	0x50040000
 80013ec:	50040300 	.word	0x50040300
 80013f0:	fff0c007 	.word	0xfff0c007

080013f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe82 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d167      	bne.n	80014e0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_Start_DMA+0x2a>
 800141a:	2302      	movs	r3, #2
 800141c:	e063      	b.n	80014e6 <HAL_ADC_Start_DMA+0xf2>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fc78 	bl	8001d1c <ADC_Enable>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d14f      	bne.n	80014d6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	f023 0206 	bic.w	r2, r3, #6
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	65da      	str	r2, [r3, #92]	; 0x5c
 8001462:	e002      	b.n	800146a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <HAL_ADC_Start_DMA+0xfc>)
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <HAL_ADC_Start_DMA+0x100>)
 8001478:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <HAL_ADC_Start_DMA+0x104>)
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	221c      	movs	r2, #28
 8001488:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0210 	orr.w	r2, r2, #16
 80014a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3340      	adds	r3, #64	; 0x40
 80014bc:	4619      	mov	r1, r3
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f000 ff0f 	bl	80022e4 <HAL_DMA_Start_IT>
 80014c6:	4603      	mov	r3, r0
 80014c8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fe09 	bl	80010e6 <LL_ADC_REG_StartConversion>
 80014d4:	e006      	b.n	80014e4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80014de:	e001      	b.n	80014e4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014e0:	2302      	movs	r3, #2
 80014e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08001e29 	.word	0x08001e29
 80014f4:	08001f01 	.word	0x08001f01
 80014f8:	08001f1d 	.word	0x08001f1d

080014fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0b6      	sub	sp, #216	; 0xd8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x22>
 8001542:	2302      	movs	r3, #2
 8001544:	e3d5      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x7ce>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fddb 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 83ba 	bne.w	8001cd4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d824      	bhi.n	80015b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	3b02      	subs	r3, #2
 800156e:	2b03      	cmp	r3, #3
 8001570:	d81b      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0x86>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <HAL_ADC_ConfigChannel+0x54>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	08001591 	.word	0x08001591
 8001580:	08001599 	.word	0x08001599
 8001584:	080015a1 	.word	0x080015a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	220c      	movs	r2, #12
 800158c:	605a      	str	r2, [r3, #4]
          break;
 800158e:	e011      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2212      	movs	r2, #18
 8001594:	605a      	str	r2, [r3, #4]
          break;
 8001596:	e00d      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2218      	movs	r2, #24
 800159c:	605a      	str	r2, [r3, #4]
          break;
 800159e:	e009      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a6:	605a      	str	r2, [r3, #4]
          break;
 80015a8:	e004      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2206      	movs	r2, #6
 80015ae:	605a      	str	r2, [r3, #4]
          break;
 80015b0:	e000      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80015b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	f7ff fca0 	bl	8000f06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd9f 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 80015d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fdab 	bl	8001134 <LL_ADC_INJ_IsConversionOngoing>
 80015de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 81c1 	bne.w	800196e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f040 81bc 	bne.w	800196e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015fe:	d10f      	bne.n	8001620 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fca7 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc4e 	bl	8000eba <LL_ADC_SetSamplingTimeCommonConfig>
 800161e:	e00e      	b.n	800163e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	461a      	mov	r2, r3
 800162e:	f7ff fc96 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fc3e 	bl	8000eba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b04      	cmp	r3, #4
 800165e:	d00a      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6919      	ldr	r1, [r3, #16]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001670:	f7ff fbce 	bl	8000e10 <LL_ADC_SetOffset>
 8001674:	e17b      	b.n	800196e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fbeb 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10a      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x17e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fbe0 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	0e9b      	lsrs	r3, r3, #26
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	e01e      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x1bc>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fbd5 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80016d0:	2320      	movs	r3, #32
 80016d2:	e004      	b.n	80016de <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80016d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d4>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0e9b      	lsrs	r3, r3, #26
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	e018      	b.n	800172a <HAL_ADC_ConfigChannel+0x206>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800170c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800171c:	2320      	movs	r3, #32
 800171e:	e004      	b.n	800172a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800172a:	429a      	cmp	r2, r3
 800172c:	d106      	bne.n	800173c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fba4 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb88 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x244>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2101      	movs	r1, #1
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fb7d 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	0e9b      	lsrs	r3, r3, #26
 8001762:	f003 021f 	and.w	r2, r3, #31
 8001766:	e01e      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x282>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fb72 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800178a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800178e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001796:	2320      	movs	r3, #32
 8001798:	e004      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800179a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d105      	bne.n	80017be <HAL_ADC_ConfigChannel+0x29a>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	0e9b      	lsrs	r3, r3, #26
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	e018      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x2cc>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80017e2:	2320      	movs	r3, #32
 80017e4:	e004      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80017e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d106      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2200      	movs	r2, #0
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fb41 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2102      	movs	r1, #2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fb25 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <HAL_ADC_ConfigChannel+0x30a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fb1a 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	0e9b      	lsrs	r3, r3, #26
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	e01e      	b.n	800186c <HAL_ADC_ConfigChannel+0x348>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2102      	movs	r1, #2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fb0f 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800184c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800185c:	2320      	movs	r3, #32
 800185e:	e004      	b.n	800186a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x360>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0e9b      	lsrs	r3, r3, #26
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	e016      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x38e>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800189c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80018a4:	2320      	movs	r3, #32
 80018a6:	e004      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80018a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d106      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	2102      	movs	r1, #2
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fae0 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2103      	movs	r1, #3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fac4 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10a      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x3cc>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2103      	movs	r1, #3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fab9 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	0e9b      	lsrs	r3, r3, #26
 80018ea:	f003 021f 	and.w	r2, r3, #31
 80018ee:	e017      	b.n	8001920 <HAL_ADC_ConfigChannel+0x3fc>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2103      	movs	r1, #3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff faae 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800190a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800190c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001912:	2320      	movs	r3, #32
 8001914:	e003      	b.n	800191e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x414>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	e011      	b.n	800195c <HAL_ADC_ConfigChannel+0x438>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001948:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800194a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001950:	2320      	movs	r3, #32
 8001952:	e003      	b.n	800195c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800195c:	429a      	cmp	r2, r3
 800195e:	d106      	bne.n	800196e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	2103      	movs	r1, #3
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fa8b 	bl	8000e84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fba4 	bl	80010c0 <LL_ADC_IsEnabled>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 8140 	bne.w	8001c00 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	461a      	mov	r2, r3
 800198e:	f7ff fb11 	bl	8000fb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	4a8f      	ldr	r2, [pc, #572]	; (8001bd4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	f040 8131 	bne.w	8001c00 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10b      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x4a2>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	3301      	adds	r3, #1
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	bf94      	ite	ls
 80019be:	2301      	movls	r3, #1
 80019c0:	2300      	movhi	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	e019      	b.n	80019fa <HAL_ADC_ConfigChannel+0x4d6>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80019de:	2320      	movs	r3, #32
 80019e0:	e003      	b.n	80019ea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80019e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2b09      	cmp	r3, #9
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d079      	beq.n	8001af2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x4f6>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0e9b      	lsrs	r3, r3, #26
 8001a10:	3301      	adds	r3, #1
 8001a12:	069b      	lsls	r3, r3, #26
 8001a14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a18:	e015      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x522>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001a32:	2320      	movs	r3, #32
 8001a34:	e003      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	069b      	lsls	r3, r3, #26
 8001a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x542>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	e017      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x572>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	e003      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	ea42 0103 	orr.w	r1, r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x598>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0e9b      	lsrs	r3, r3, #26
 8001aac:	3301      	adds	r3, #1
 8001aae:	f003 021f 	and.w	r2, r3, #31
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	e018      	b.n	8001aee <HAL_ADC_ConfigChannel+0x5ca>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	e003      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f003 021f 	and.w	r2, r3, #31
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aee:	430b      	orrs	r3, r1
 8001af0:	e081      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x5ea>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	3301      	adds	r3, #1
 8001b06:	069b      	lsls	r3, r3, #26
 8001b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b0c:	e015      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x616>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001b26:	2320      	movs	r3, #32
 8001b28:	e003      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	069b      	lsls	r3, r3, #26
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x636>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	e017      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x666>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	61fb      	str	r3, [r7, #28]
  return result;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e003      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	ea42 0103 	orr.w	r1, r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x692>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f003 021f 	and.w	r2, r3, #31
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	3b1e      	subs	r3, #30
 8001bae:	051b      	lsls	r3, r3, #20
 8001bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	e01e      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x6d0>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	613b      	str	r3, [r7, #16]
  return result;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d104      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	e006      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x6bc>
 8001bd2:	bf00      	nop
 8001bd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f003 021f 	and.w	r2, r3, #31
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	3b1e      	subs	r3, #30
 8001bee:	051b      	lsls	r3, r3, #20
 8001bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6892      	ldr	r2, [r2, #8]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7ff f9af 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_ADC_ConfigChannel+0x7d8>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d06c      	beq.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c0c:	483c      	ldr	r0, [pc, #240]	; (8001d00 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c0e:	f7ff f8f1 	bl	8000df4 <LL_ADC_GetCommonPathInternalCh>
 8001c12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3a      	ldr	r2, [pc, #232]	; (8001d04 <HAL_ADC_ConfigChannel+0x7e0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d127      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d121      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a35      	ldr	r2, [pc, #212]	; (8001d08 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d157      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c3e:	4619      	mov	r1, r3
 8001c40:	482f      	ldr	r0, [pc, #188]	; (8001d00 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c42:	f7ff f8c4 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_ADC_ConfigChannel+0x7e8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	099b      	lsrs	r3, r3, #6
 8001c4c:	4a30      	ldr	r2, [pc, #192]	; (8001d10 <HAL_ADC_ConfigChannel+0x7ec>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c60:	e002      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f9      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c6e:	e03a      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_ADC_ConfigChannel+0x7f0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d113      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x77e>
 8001c7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10d      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d12a      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4819      	ldr	r0, [pc, #100]	; (8001d00 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c9c:	f7ff f897 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ca0:	e021      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d11c      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d116      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_ADC_ConfigChannel+0x7e4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d111      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cce:	f7ff f87e 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
 8001cd2:	e008      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f043 0220 	orr.w	r2, r3, #32
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001cee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	37d8      	adds	r7, #216	; 0xd8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	80080000 	.word	0x80080000
 8001d00:	50040300 	.word	0x50040300
 8001d04:	c7520000 	.word	0xc7520000
 8001d08:	50040000 	.word	0x50040000
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	053e2d63 	.word	0x053e2d63
 8001d14:	cb840000 	.word	0xcb840000
 8001d18:	80000001 	.word	0x80000001

08001d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f9c7 	bl	80010c0 <LL_ADC_IsEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d169      	bne.n	8001e0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <ADC_Enable+0xfc>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00d      	beq.n	8001d62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f043 0210 	orr.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e055      	b.n	8001e0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f996 	bl	8001098 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d6c:	482b      	ldr	r0, [pc, #172]	; (8001e1c <ADC_Enable+0x100>)
 8001d6e:	f7ff f841 	bl	8000df4 <LL_ADC_GetCommonPathInternalCh>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <ADC_Enable+0x104>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <ADC_Enable+0x108>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d96:	e002      	b.n	8001d9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f9      	bne.n	8001d98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001da4:	f7fe fff4 	bl	8000d90 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001daa:	e028      	b.n	8001dfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f985 	bl	80010c0 <LL_ADC_IsEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d104      	bne.n	8001dc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f969 	bl	8001098 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dc6:	f7fe ffe3 	bl	8000d90 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d914      	bls.n	8001dfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d00d      	beq.n	8001dfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e007      	b.n	8001e0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d1cf      	bne.n	8001dac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	8000003f 	.word	0x8000003f
 8001e1c:	50040300 	.word	0x50040300
 8001e20:	20000000 	.word	0x20000000
 8001e24:	053e2d63 	.word	0x053e2d63

08001e28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d14b      	bne.n	8001eda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d021      	beq.n	8001ea0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f83d 	bl	8000ee0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d032      	beq.n	8001ed2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d12b      	bne.n	8001ed2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11f      	bne.n	8001ed2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e9e:	e018      	b.n	8001ed2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d111      	bne.n	8001ed2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7fe fb1e 	bl	8000514 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ed8:	e00e      	b.n	8001ef8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fb12 	bl	8001510 <HAL_ADC_ErrorCallback>
}
 8001eec:	e004      	b.n	8001ef8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff faf4 	bl	80014fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	f043 0204 	orr.w	r2, r3, #4
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fae4 	bl	8001510 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	; (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff29 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff3e 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff31 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa2 	bl	80020ac <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e098      	b.n	80022b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <HAL_DMA_Init+0x150>)
 800218e:	429a      	cmp	r2, r3
 8002190:	d80f      	bhi.n	80021b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <HAL_DMA_Init+0x154>)
 800219a:	4413      	add	r3, r2
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_DMA_Init+0x158>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	009a      	lsls	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_DMA_Init+0x15c>)
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
 80021b0:	e00e      	b.n	80021d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_DMA_Init+0x160>)
 80021ba:	4413      	add	r3, r2
 80021bc:	4a43      	ldr	r2, [pc, #268]	; (80022cc <HAL_DMA_Init+0x158>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a42      	ldr	r2, [pc, #264]	; (80022d8 <HAL_DMA_Init+0x164>)
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222a:	d039      	beq.n	80022a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_DMA_Init+0x15c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d11a      	bne.n	800226c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_DMA_Init+0x168>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f003 031c 	and.w	r3, r3, #28
 8002242:	210f      	movs	r1, #15
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	4924      	ldr	r1, [pc, #144]	; (80022dc <HAL_DMA_Init+0x168>)
 800224c:	4013      	ands	r3, r2
 800224e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <HAL_DMA_Init+0x168>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f003 031c 	and.w	r3, r3, #28
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	491d      	ldr	r1, [pc, #116]	; (80022dc <HAL_DMA_Init+0x168>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
 800226a:	e019      	b.n	80022a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_DMA_Init+0x16c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f003 031c 	and.w	r3, r3, #28
 8002278:	210f      	movs	r1, #15
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	4917      	ldr	r1, [pc, #92]	; (80022e0 <HAL_DMA_Init+0x16c>)
 8002282:	4013      	ands	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_DMA_Init+0x16c>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f003 031c 	and.w	r3, r3, #28
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	4911      	ldr	r1, [pc, #68]	; (80022e0 <HAL_DMA_Init+0x16c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40020407 	.word	0x40020407
 80022c8:	bffdfff8 	.word	0xbffdfff8
 80022cc:	cccccccd 	.word	0xcccccccd
 80022d0:	40020000 	.word	0x40020000
 80022d4:	bffdfbf8 	.word	0xbffdfbf8
 80022d8:	40020400 	.word	0x40020400
 80022dc:	400200a8 	.word	0x400200a8
 80022e0:	400204a8 	.word	0x400204a8

080022e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Start_IT+0x20>
 8002300:	2302      	movs	r3, #2
 8002302:	e04b      	b.n	800239c <HAL_DMA_Start_IT+0xb8>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d13a      	bne.n	800238e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f8e0 	bl	8002502 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 020e 	orr.w	r2, r2, #14
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e00f      	b.n	800237c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0204 	bic.w	r2, r2, #4
 800236a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 020a 	orr.w	r2, r2, #10
 800237a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e005      	b.n	800239a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002396:	2302      	movs	r3, #2
 8002398:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800239a:	7dfb      	ldrb	r3, [r7, #23]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f003 031c 	and.w	r3, r3, #28
 80023c4:	2204      	movs	r2, #4
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d026      	beq.n	800241e <HAL_DMA_IRQHandler+0x7a>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d021      	beq.n	800241e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0204 	bic.w	r2, r2, #4
 80023f6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f003 021c 	and.w	r2, r3, #28
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2104      	movs	r1, #4
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	2b00      	cmp	r3, #0
 8002412:	d071      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800241c:	e06c      	b.n	80024f8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f003 031c 	and.w	r3, r3, #28
 8002426:	2202      	movs	r2, #2
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d02e      	beq.n	8002490 <HAL_DMA_IRQHandler+0xec>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d029      	beq.n	8002490 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 020a 	bic.w	r2, r2, #10
 8002458:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 021c 	and.w	r2, r3, #28
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2102      	movs	r1, #2
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d038      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800248e:	e033      	b.n	80024f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f003 031c 	and.w	r3, r3, #28
 8002498:	2208      	movs	r2, #8
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d02a      	beq.n	80024fa <HAL_DMA_IRQHandler+0x156>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d025      	beq.n	80024fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 020e 	bic.w	r2, r2, #14
 80024bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f003 021c 	and.w	r2, r3, #28
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
}
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 021c 	and.w	r2, r3, #28
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d108      	bne.n	8002546 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002544:	e007      	b.n	8002556 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	60da      	str	r2, [r3, #12]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002572:	e154      	b.n	800281e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8146 	beq.w	8002818 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d005      	beq.n	80025a4 <HAL_GPIO_Init+0x40>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d130      	bne.n	8002606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025da:	2201      	movs	r2, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 0201 	and.w	r2, r3, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b03      	cmp	r3, #3
 8002610:	d017      	beq.n	8002642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d123      	bne.n	8002696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	6939      	ldr	r1, [r7, #16]
 8002692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0203 	and.w	r2, r3, #3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80a0 	beq.w	8002818 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d8:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_GPIO_Init+0x2d8>)
 80026da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026dc:	4a57      	ldr	r2, [pc, #348]	; (800283c <HAL_GPIO_Init+0x2d8>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6613      	str	r3, [r2, #96]	; 0x60
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <HAL_GPIO_Init+0x2d8>)
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026f0:	4a53      	ldr	r2, [pc, #332]	; (8002840 <HAL_GPIO_Init+0x2dc>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800271a:	d019      	beq.n	8002750 <HAL_GPIO_Init+0x1ec>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a49      	ldr	r2, [pc, #292]	; (8002844 <HAL_GPIO_Init+0x2e0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_GPIO_Init+0x1e8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a48      	ldr	r2, [pc, #288]	; (8002848 <HAL_GPIO_Init+0x2e4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00d      	beq.n	8002748 <HAL_GPIO_Init+0x1e4>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a47      	ldr	r2, [pc, #284]	; (800284c <HAL_GPIO_Init+0x2e8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d007      	beq.n	8002744 <HAL_GPIO_Init+0x1e0>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a46      	ldr	r2, [pc, #280]	; (8002850 <HAL_GPIO_Init+0x2ec>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_GPIO_Init+0x1dc>
 800273c:	2304      	movs	r3, #4
 800273e:	e008      	b.n	8002752 <HAL_GPIO_Init+0x1ee>
 8002740:	2307      	movs	r3, #7
 8002742:	e006      	b.n	8002752 <HAL_GPIO_Init+0x1ee>
 8002744:	2303      	movs	r3, #3
 8002746:	e004      	b.n	8002752 <HAL_GPIO_Init+0x1ee>
 8002748:	2302      	movs	r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_Init+0x1ee>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_GPIO_Init+0x1ee>
 8002750:	2300      	movs	r3, #0
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	f002 0203 	and.w	r2, r2, #3
 8002758:	0092      	lsls	r2, r2, #2
 800275a:	4093      	lsls	r3, r2
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002762:	4937      	ldr	r1, [pc, #220]	; (8002840 <HAL_GPIO_Init+0x2dc>)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002794:	4a2f      	ldr	r2, [pc, #188]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027be:	4a25      	ldr	r2, [pc, #148]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_GPIO_Init+0x2f0>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f aea3 	bne.w	8002574 <HAL_GPIO_Init+0x10>
  }
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	48000400 	.word	0x48000400
 8002848:	48000800 	.word	0x48000800
 800284c:	48000c00 	.word	0x48000c00
 8002850:	48001000 	.word	0x48001000
 8002854:	40010400 	.word	0x40010400

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002874:	e002      	b.n	800287c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40007000 	.word	0x40007000

080028a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d130      	bne.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c0:	d038      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ca:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2232      	movs	r2, #50	; 0x32
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e8:	e002      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fc:	d102      	bne.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f2      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002910:	d110      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e00f      	b.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d007      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000
 8002948:	20000000 	.word	0x20000000
 800294c:	431bde83 	.word	0x431bde83

08002950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f000 bc02 	b.w	8003168 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4b96      	ldr	r3, [pc, #600]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296e:	4b94      	ldr	r3, [pc, #592]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80e4 	beq.w	8002b4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_RCC_OscConfig+0x4c>
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	f040 808b 	bne.w	8002aaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b01      	cmp	r3, #1
 8002998:	f040 8087 	bne.w	8002aaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299c:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x64>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e3d9      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_RCC_OscConfig+0x7e>
 80029c4:	4b7e      	ldr	r3, [pc, #504]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029cc:	e005      	b.n	80029da <HAL_RCC_OscConfig+0x8a>
 80029ce:	4b7c      	ldr	r3, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029da:	4293      	cmp	r3, r2
 80029dc:	d223      	bcs.n	8002a26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd8c 	bl	8003500 <RCC_SetFlashLatencyFromMSIRange>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e3ba      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	496d      	ldr	r1, [pc, #436]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a10:	4b6b      	ldr	r3, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	4968      	ldr	r1, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	e025      	b.n	8002a72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a26:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a65      	ldr	r2, [pc, #404]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4960      	ldr	r1, [pc, #384]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	495b      	ldr	r1, [pc, #364]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fd4c 	bl	8003500 <RCC_SetFlashLatencyFromMSIRange>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e37a      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a72:	f000 fc81 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4950      	ldr	r1, [pc, #320]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_RCC_OscConfig+0x278>)
 8002a90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a92:	4b4e      	ldr	r3, [pc, #312]	; (8002bcc <HAL_RCC_OscConfig+0x27c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f92a 	bl	8000cf0 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d052      	beq.n	8002b4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	e35e      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d032      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab2:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a42      	ldr	r2, [pc, #264]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002abe:	f7fe f967 	bl	8000d90 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac6:	f7fe f963 	bl	8000d90 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e347      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4930      	ldr	r1, [pc, #192]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	492b      	ldr	r1, [pc, #172]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
 8002b16:	e01a      	b.n	8002b4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b24:	f7fe f934 	bl	8000d90 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b2c:	f7fe f930 	bl	8000d90 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e314      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1dc>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d073      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x21c>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d10e      	bne.n	8002b84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d063      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d15f      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e2f1      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x24c>
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e025      	b.n	8002be8 <HAL_RCC_OscConfig+0x298>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d114      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x280>
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a02      	ldr	r2, [pc, #8]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e013      	b.n	8002be8 <HAL_RCC_OscConfig+0x298>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08005118 	.word	0x08005118
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000004 	.word	0x20000004
 8002bd0:	4ba0      	ldr	r3, [pc, #640]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a9f      	ldr	r2, [pc, #636]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a9c      	ldr	r2, [pc, #624]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f8ce 	bl	8000d90 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe f8ca 	bl	8000d90 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e2ae      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0a:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x2a8>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f8ba 	bl	8000d90 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe f8b6 	bl	8000d90 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e29a      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d0>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d060      	beq.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_OscConfig+0x310>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d119      	bne.n	8002c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d116      	bne.n	8002c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c60:	4b7c      	ldr	r3, [pc, #496]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_OscConfig+0x328>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e277      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	4973      	ldr	r1, [pc, #460]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c8c:	e040      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d023      	beq.n	8002cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c96:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe f875 	bl	8000d90 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe f871 	bl	8000d90 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e255      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cbc:	4b65      	ldr	r3, [pc, #404]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b62      	ldr	r3, [pc, #392]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	495f      	ldr	r1, [pc, #380]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
 8002cdc:	e018      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cde:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe f851 	bl	8000d90 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fe f84d 	bl	8000d90 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e231      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d03c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2a:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe f82c 	bl	8000d90 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe f828 	bl	8000d90 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e20c      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ef      	beq.n	8002d3c <HAL_RCC_OscConfig+0x3ec>
 8002d5c:	e01b      	b.n	8002d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d64:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe f80f 	bl	8000d90 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fe f80b 	bl	8000d90 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1ef      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ef      	bne.n	8002d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80a6 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002da8:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db4:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d118      	bne.n	8002e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de8:	f7fd ffd2 	bl	8000d90 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df0:	f7fd ffce 	bl	8000d90 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1b2      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4d8>
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e26:	e029      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d115      	bne.n	8002e5c <HAL_RCC_OscConfig+0x50c>
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	4a03      	ldr	r2, [pc, #12]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e50:	e014      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	4b9a      	ldr	r3, [pc, #616]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	4a99      	ldr	r2, [pc, #612]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e6c:	4b96      	ldr	r3, [pc, #600]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a95      	ldr	r2, [pc, #596]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d016      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd ff84 	bl	8000d90 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fd ff80 	bl	8000d90 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e162      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea2:	4b89      	ldr	r3, [pc, #548]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ed      	beq.n	8002e8c <HAL_RCC_OscConfig+0x53c>
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fd ff6d 	bl	8000d90 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fd ff69 	bl	8000d90 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e14b      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed0:	4b7d      	ldr	r3, [pc, #500]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ed      	bne.n	8002eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b78      	ldr	r3, [pc, #480]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4a77      	ldr	r2, [pc, #476]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d03c      	beq.n	8002f76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f04:	4b70      	ldr	r3, [pc, #448]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f0a:	4a6f      	ldr	r2, [pc, #444]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fd ff3c 	bl	8000d90 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f1c:	f7fd ff38 	bl	8000d90 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e11c      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f2e:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ef      	beq.n	8002f1c <HAL_RCC_OscConfig+0x5cc>
 8002f3c:	e01b      	b.n	8002f76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f44:	4a60      	ldr	r2, [pc, #384]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fd ff1f 	bl	8000d90 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f56:	f7fd ff1b 	bl	8000d90 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0ff      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f68:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ef      	bne.n	8002f56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80f3 	beq.w	8003166 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f040 80c9 	bne.w	800311c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0203 	and.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d12c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d123      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d113      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d06b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d062      	beq.n	80030c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0ac      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003018:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800301a:	f7fd feb9 	bl	8000d90 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fd feb5 	bl	8000d90 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e099      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_RCC_OscConfig+0x77c>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003050:	3a01      	subs	r2, #1
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800305a:	0212      	lsls	r2, r2, #8
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	0552      	lsls	r2, r2, #21
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0652      	lsls	r2, r2, #25
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800307a:	06d2      	lsls	r2, r2, #27
 800307c:	430a      	orrs	r2, r1
 800307e:	4912      	ldr	r1, [pc, #72]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800309c:	f7fd fe78 	bl	8000d90 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fd fe74 	bl	8000d90 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e058      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c2:	e050      	b.n	8003166 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04f      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d144      	bne.n	8003166 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a20      	ldr	r2, [pc, #128]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030f4:	f7fd fe4c 	bl	8000d90 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd fe48 	bl	8000d90 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e02c      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x7ac>
 800311a:	e024      	b.n	8003166 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d01f      	beq.n	8003162 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fd fe2f 	bl	8000d90 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fe2b 	bl	8000d90 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4905      	ldr	r1, [pc, #20]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x824>)
 800315c:	4013      	ands	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
 8003160:	e001      	b.n	8003166 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	feeefffc 	.word	0xfeeefffc

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0e7      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b75      	ldr	r3, [pc, #468]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b72      	ldr	r3, [pc, #456]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4970      	ldr	r1, [pc, #448]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0cf      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d908      	bls.n	80031ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4960      	ldr	r1, [pc, #384]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04c      	beq.n	8003290 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d121      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0a6      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d115      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e09a      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e08e      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323e:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e086      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4943      	ldr	r1, [pc, #268]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fd fd96 	bl	8000d90 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fd fd92 	bl	8000d90 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e06e      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d208      	bcs.n	80032be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	492b      	ldr	r1, [pc, #172]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d210      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	4923      	ldr	r1, [pc, #140]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e036      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4918      	ldr	r1, [pc, #96]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4910      	ldr	r1, [pc, #64]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800332c:	f000 f824 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	490b      	ldr	r1, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x1f4>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1f8>)
 800334a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1fc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fccd 	bl	8000cf0 <HAL_InitTick>
 8003356:	4603      	mov	r3, r0
 8003358:	72fb      	strb	r3, [r7, #11]

  return status;
 800335a:	7afb      	ldrb	r3, [r7, #11]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
 800336c:	08005118 	.word	0x08005118
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003386:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d121      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d11e      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e005      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d102      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_GetSysClockFreq+0x110>)
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	e004      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_RCC_GetSysClockFreq+0x114>)
 80033fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d134      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0xa6>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d003      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0xac>
 800341c:	e005      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_RCC_GetSysClockFreq+0x110>)
 8003420:	617b      	str	r3, [r7, #20]
      break;
 8003422:	e005      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_GetSysClockFreq+0x114>)
 8003426:	617b      	str	r3, [r7, #20]
      break;
 8003428:	e002      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	617b      	str	r3, [r7, #20]
      break;
 800342e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	3301      	adds	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	fb03 f202 	mul.w	r2, r3, r2
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	0e5b      	lsrs	r3, r3, #25
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	3301      	adds	r3, #1
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003470:	69bb      	ldr	r3, [r7, #24]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	08005130 	.word	0x08005130
 8003488:	00f42400 	.word	0x00f42400
 800348c:	007a1200 	.word	0x007a1200

08003490 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4904      	ldr	r1, [pc, #16]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	08005128 	.word	0x08005128

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034d8:	f7ff ffda 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0adb      	lsrs	r3, r3, #11
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08005128 	.word	0x08005128

08003500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003518:	f7ff f9b6 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 800351c:	6178      	str	r0, [r7, #20]
 800351e:	e014      	b.n	800354a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003538:	f7ff f9a6 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 800353c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d10b      	bne.n	800356a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d919      	bls.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2ba0      	cmp	r3, #160	; 0xa0
 800355c:	d902      	bls.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355e:	2302      	movs	r3, #2
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e013      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003564:	2301      	movs	r3, #1
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	e010      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d902      	bls.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003570:	2303      	movs	r3, #3
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e00a      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d102      	bne.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800357c:	2302      	movs	r3, #2
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e004      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d101      	bne.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003588:	2301      	movs	r3, #1
 800358a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 0207 	bic.w	r2, r3, #7
 8003594:	4909      	ldr	r1, [pc, #36]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40022000 	.word	0x40022000

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035cc:	2300      	movs	r3, #0
 80035ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d031      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035e4:	d01a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ea:	d814      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f4:	d10f      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80035f6:	4b5d      	ldr	r3, [pc, #372]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a5c      	ldr	r2, [pc, #368]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003602:	e00c      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fa44 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	74fb      	strb	r3, [r7, #19]
      break;
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800361c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003624:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	494e      	ldr	r1, [pc, #312]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800363a:	e001      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 809e 	beq.w	800378a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003652:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b40      	ldr	r3, [pc, #256]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	4a3f      	ldr	r2, [pc, #252]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003672:	6593      	str	r3, [r2, #88]	; 0x58
 8003674:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003680:	2301      	movs	r3, #1
 8003682:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a39      	ldr	r2, [pc, #228]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003690:	f7fd fb7e 	bl	8000d90 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003696:	e009      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fd fb7a 	bl	8000d90 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	74fb      	strb	r3, [r7, #19]
        break;
 80036aa:	e005      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d15a      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036be:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01e      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d019      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003706:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d016      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fb3a 	bl	8000d90 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371e:	e00b      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fd fb36 	bl	8000d90 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d902      	bls.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	74fb      	strb	r3, [r7, #19]
            break;
 8003736:	e006      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ec      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10b      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375a:	4904      	ldr	r1, [pc, #16]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003762:	e009      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003778:	7c7b      	ldrb	r3, [r7, #17]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b9e      	ldr	r3, [pc, #632]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a9d      	ldr	r2, [pc, #628]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003796:	4b98      	ldr	r3, [pc, #608]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f023 0203 	bic.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4994      	ldr	r1, [pc, #592]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b8:	4b8f      	ldr	r3, [pc, #572]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f023 020c 	bic.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	498c      	ldr	r1, [pc, #560]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037da:	4b87      	ldr	r3, [pc, #540]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	4983      	ldr	r1, [pc, #524]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037fc:	4b7e      	ldr	r3, [pc, #504]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	497b      	ldr	r1, [pc, #492]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381e:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	4972      	ldr	r1, [pc, #456]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003840:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	496a      	ldr	r1, [pc, #424]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	4961      	ldr	r1, [pc, #388]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003884:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	4959      	ldr	r1, [pc, #356]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	4950      	ldr	r1, [pc, #320]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	4948      	ldr	r1, [pc, #288]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f0:	f023 0203 	bic.w	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	493f      	ldr	r1, [pc, #252]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d028      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	4937      	ldr	r1, [pc, #220]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392a:	d106      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a31      	ldr	r2, [pc, #196]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003936:	60d3      	str	r3, [r2, #12]
 8003938:	e011      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003942:	d10c      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f8a4 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	491f      	ldr	r1, [pc, #124]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003988:	d106      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a1a      	ldr	r2, [pc, #104]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003994:	60d3      	str	r3, [r2, #12]
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2101      	movs	r1, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f875 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d02b      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e6:	d109      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a02      	ldr	r2, [pc, #8]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f2:	60d3      	str	r3, [r2, #12]
 80039f4:	e014      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f843 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01c      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	4916      	ldr	r1, [pc, #88]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2102      	movs	r1, #2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f820 	bl	8003a98 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a80:	4904      	ldr	r1, [pc, #16]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000

08003a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aa6:	4b74      	ldr	r3, [pc, #464]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d018      	beq.n	8003ae4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ab2:	4b71      	ldr	r3, [pc, #452]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0203 	and.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d10d      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aca:	4b6b      	ldr	r3, [pc, #428]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
       ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d047      	beq.n	8003b6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e044      	b.n	8003b6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d018      	beq.n	8003b1e <RCCEx_PLLSAI1_Config+0x86>
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d825      	bhi.n	8003b3c <RCCEx_PLLSAI1_Config+0xa4>
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d002      	beq.n	8003afa <RCCEx_PLLSAI1_Config+0x62>
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d009      	beq.n	8003b0c <RCCEx_PLLSAI1_Config+0x74>
 8003af8:	e020      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003afa:	4b5f      	ldr	r3, [pc, #380]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11d      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b0a:	e01a      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b0c:	4b5a      	ldr	r3, [pc, #360]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b1c:	e013      	b.n	8003b46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b1e:	4b56      	ldr	r3, [pc, #344]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b2a:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b3a:	e006      	b.n	8003b4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e004      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b52:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	430b      	orrs	r3, r1
 8003b68:	4943      	ldr	r1, [pc, #268]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d17c      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b74:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3f      	ldr	r2, [pc, #252]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fd f906 	bl	8000d90 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b86:	e009      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b88:	f7fd f902 	bl	8000d90 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	73fb      	strb	r3, [r7, #15]
        break;
 8003b9a:	e005      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ef      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d15f      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d110      	bne.n	8003bd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb4:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6892      	ldr	r2, [r2, #8]
 8003bc4:	0211      	lsls	r1, r2, #8
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68d2      	ldr	r2, [r2, #12]
 8003bca:	06d2      	lsls	r2, r2, #27
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	492a      	ldr	r1, [pc, #168]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	610b      	str	r3, [r1, #16]
 8003bd4:	e027      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d112      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bdc:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003be4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6892      	ldr	r2, [r2, #8]
 8003bec:	0211      	lsls	r1, r2, #8
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6912      	ldr	r2, [r2, #16]
 8003bf2:	0852      	lsrs	r2, r2, #1
 8003bf4:	3a01      	subs	r2, #1
 8003bf6:	0552      	lsls	r2, r2, #21
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	491f      	ldr	r1, [pc, #124]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	610b      	str	r3, [r1, #16]
 8003c00:	e011      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6892      	ldr	r2, [r2, #8]
 8003c12:	0211      	lsls	r1, r2, #8
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6952      	ldr	r2, [r2, #20]
 8003c18:	0852      	lsrs	r2, r2, #1
 8003c1a:	3a01      	subs	r2, #1
 8003c1c:	0652      	lsls	r2, r2, #25
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	4915      	ldr	r1, [pc, #84]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd f8ad 	bl	8000d90 <HAL_GetTick>
 8003c36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c38:	e009      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c3a:	f7fd f8a9 	bl	8000d90 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d902      	bls.n	8003c4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	73fb      	strb	r3, [r7, #15]
          break;
 8003c4c:	e005      	b.n	8003c5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ef      	beq.n	8003c3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	4903      	ldr	r1, [pc, #12]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e040      	b.n	8003d16 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_TIM_Base_Start_IT+0xa8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbe:	d009      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <HAL_TIM_Base_Start_IT+0xac>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <HAL_TIM_Base_Start_IT+0xb0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d115      	bne.n	8003d00 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d015      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x96>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d011      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	e008      	b.n	8003d12 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e000      	b.n	8003d14 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	00010007 	.word	0x00010007

08003d34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e049      	b.n	8003dda <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc fe92 	bl	8000a84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 fa18 	bl	80041a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d122      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d11b      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0202 	mvn.w	r2, #2
 8003e0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f9a1 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003e2a:	e005      	b.n	8003e38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f993 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9a4 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d122      	bne.n	8003e92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d11b      	bne.n	8003e92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0204 	mvn.w	r2, #4
 8003e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f977 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003e7e:	e005      	b.n	8003e8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f969 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f97a 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d122      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d11b      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0208 	mvn.w	r2, #8
 8003eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f94d 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003ed2:	e005      	b.n	8003ee0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f93f 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f950 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d122      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b10      	cmp	r3, #16
 8003f00:	d11b      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0210 	mvn.w	r2, #16
 8003f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2208      	movs	r2, #8
 8003f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f923 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003f26:	e005      	b.n	8003f34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f915 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f926 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10e      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0201 	mvn.w	r2, #1
 8003f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fac1 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d10e      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b80      	cmp	r3, #128	; 0x80
 8003f80:	d107      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb03 	bl	8004598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 faf6 	bl	80045ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8d4 	bl	8004194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0220 	mvn.w	r2, #32
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fab6 	bl	8004584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_TIM_IC_ConfigChannel+0x1e>
 800403a:	2302      	movs	r3, #2
 800403c:	e088      	b.n	8004150 <HAL_TIM_IC_ConfigChannel+0x130>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f000 f912 	bl	8004284 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 020c 	bic.w	r2, r2, #12
 800406e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
 8004082:	e060      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d11c      	bne.n	80040c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f000 f94f 	bl	800433c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6999      	ldr	r1, [r3, #24]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	021a      	lsls	r2, r3, #8
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	619a      	str	r2, [r3, #24]
 80040c2:	e040      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d11b      	bne.n	8004102 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f000 f96c 	bl	80043b6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 020c 	bic.w	r2, r2, #12
 80040ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	61da      	str	r2, [r3, #28]
 8004100:	e021      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d11c      	bne.n	8004142 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f000 f989 	bl	800442e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800412a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69d9      	ldr	r1, [r3, #28]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	61da      	str	r2, [r3, #28]
 8004140:	e001      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a2e      	ldr	r2, [pc, #184]	; (8004274 <TIM_Base_SetConfig+0xcc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0x28>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0x28>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a2b      	ldr	r2, [pc, #172]	; (8004278 <TIM_Base_SetConfig+0xd0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d108      	bne.n	80041e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a23      	ldr	r2, [pc, #140]	; (8004274 <TIM_Base_SetConfig+0xcc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <TIM_Base_SetConfig+0x62>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d00b      	beq.n	800420a <TIM_Base_SetConfig+0x62>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <TIM_Base_SetConfig+0xd0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <TIM_Base_SetConfig+0x62>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1f      	ldr	r2, [pc, #124]	; (800427c <TIM_Base_SetConfig+0xd4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_Base_SetConfig+0x62>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <TIM_Base_SetConfig+0xd8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <TIM_Base_SetConfig+0xcc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <TIM_Base_SetConfig+0xb0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a0c      	ldr	r2, [pc, #48]	; (800427c <TIM_Base_SetConfig+0xd4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0xb0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <TIM_Base_SetConfig+0xd8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d103      	bne.n	8004260 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	615a      	str	r2, [r3, #20]
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400

08004284 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0201 	bic.w	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a20      	ldr	r2, [pc, #128]	; (8004330 <TIM_TI1_SetConfig+0xac>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_TI1_SetConfig+0x46>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d007      	beq.n	80042ca <TIM_TI1_SetConfig+0x46>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <TIM_TI1_SetConfig+0xb0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_TI1_SetConfig+0x46>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <TIM_TI1_SetConfig+0xb4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <TIM_TI1_SetConfig+0x4a>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <TIM_TI1_SetConfig+0x4c>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e003      	b.n	80042ee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f023 030a 	bic.w	r3, r3, #10
 8004308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 030a 	and.w	r3, r3, #10
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40014000 	.word	0x40014000

0800433c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0210 	bic.w	r2, r3, #16
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	b29b      	uxth	r3, r3
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004406:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800442e:	b480      	push	{r7}
 8004430:	b087      	sub	sp, #28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800446c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	b29b      	uxth	r3, r3
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004480:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e054      	b.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a24      	ldr	r2, [pc, #144]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d009      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a13      	ldr	r2, [pc, #76]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a11      	ldr	r2, [pc, #68]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10c      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40014000 	.word	0x40014000

08004584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e040      	b.n	8004654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fa96 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8c0 	bl	8004784 <UART_SetConfig>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e022      	b.n	8004654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fb3a 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fbc1 	bl	8004dd4 <UART_CheckIdleState>
 8004652:	4603      	mov	r3, r0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004670:	2b20      	cmp	r3, #32
 8004672:	f040 8082 	bne.w	800477a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_UART_Transmit+0x26>
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07a      	b.n	800477c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_UART_Transmit+0x38>
 8004690:	2302      	movs	r3, #2
 8004692:	e073      	b.n	800477c <HAL_UART_Transmit+0x120>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2221      	movs	r2, #33	; 0x21
 80046a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046aa:	f7fc fb71 	bl	8000d90 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d108      	bne.n	80046dc <HAL_UART_Transmit+0x80>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e003      	b.n	80046e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046ec:	e02d      	b.n	800474a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2180      	movs	r1, #128	; 0x80
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fbb4 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e039      	b.n	800477c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471a:	b292      	uxth	r2, r2
 800471c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	3302      	adds	r3, #2
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e008      	b.n	8004738 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b292      	uxth	r2, r2
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3301      	adds	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1cb      	bne.n	80046ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2200      	movs	r2, #0
 800475e:	2140      	movs	r1, #64	; 0x40
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fb80 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e005      	b.n	800477c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e000      	b.n	800477c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
  }
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004788:	b08a      	sub	sp, #40	; 0x28
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4ba5      	ldr	r3, [pc, #660]	; (8004a48 <UART_SetConfig+0x2c4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047bc:	430b      	orrs	r3, r1
 80047be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a9a      	ldr	r2, [pc, #616]	; (8004a4c <UART_SetConfig+0x2c8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ec:	4313      	orrs	r3, r2
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004800:	430a      	orrs	r2, r1
 8004802:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a91      	ldr	r2, [pc, #580]	; (8004a50 <UART_SetConfig+0x2cc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d126      	bne.n	800485c <UART_SetConfig+0xd8>
 800480e:	4b91      	ldr	r3, [pc, #580]	; (8004a54 <UART_SetConfig+0x2d0>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b03      	cmp	r3, #3
 800481a:	d81b      	bhi.n	8004854 <UART_SetConfig+0xd0>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0xa0>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004835 	.word	0x08004835
 8004828:	08004845 	.word	0x08004845
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800484d 	.word	0x0800484d
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e0d6      	b.n	80049ea <UART_SetConfig+0x266>
 800483c:	2302      	movs	r3, #2
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e0d2      	b.n	80049ea <UART_SetConfig+0x266>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e0ce      	b.n	80049ea <UART_SetConfig+0x266>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e0ca      	b.n	80049ea <UART_SetConfig+0x266>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e0c6      	b.n	80049ea <UART_SetConfig+0x266>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a7d      	ldr	r2, [pc, #500]	; (8004a58 <UART_SetConfig+0x2d4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d138      	bne.n	80048d8 <UART_SetConfig+0x154>
 8004866:	4b7b      	ldr	r3, [pc, #492]	; (8004a54 <UART_SetConfig+0x2d0>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d82d      	bhi.n	80048d0 <UART_SetConfig+0x14c>
 8004874:	a201      	add	r2, pc, #4	; (adr r2, 800487c <UART_SetConfig+0xf8>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048d1 	.word	0x080048d1
 8004884:	080048d1 	.word	0x080048d1
 8004888:	080048d1 	.word	0x080048d1
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080048d1 	.word	0x080048d1
 8004894:	080048d1 	.word	0x080048d1
 8004898:	080048d1 	.word	0x080048d1
 800489c:	080048b9 	.word	0x080048b9
 80048a0:	080048d1 	.word	0x080048d1
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048c9 	.word	0x080048c9
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e098      	b.n	80049ea <UART_SetConfig+0x266>
 80048b8:	2302      	movs	r3, #2
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e094      	b.n	80049ea <UART_SetConfig+0x266>
 80048c0:	2304      	movs	r3, #4
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c6:	e090      	b.n	80049ea <UART_SetConfig+0x266>
 80048c8:	2308      	movs	r3, #8
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ce:	e08c      	b.n	80049ea <UART_SetConfig+0x266>
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d6:	e088      	b.n	80049ea <UART_SetConfig+0x266>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5f      	ldr	r2, [pc, #380]	; (8004a5c <UART_SetConfig+0x2d8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d125      	bne.n	800492e <UART_SetConfig+0x1aa>
 80048e2:	4b5c      	ldr	r3, [pc, #368]	; (8004a54 <UART_SetConfig+0x2d0>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ec:	2b30      	cmp	r3, #48	; 0x30
 80048ee:	d016      	beq.n	800491e <UART_SetConfig+0x19a>
 80048f0:	2b30      	cmp	r3, #48	; 0x30
 80048f2:	d818      	bhi.n	8004926 <UART_SetConfig+0x1a2>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d00a      	beq.n	800490e <UART_SetConfig+0x18a>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d814      	bhi.n	8004926 <UART_SetConfig+0x1a2>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <UART_SetConfig+0x182>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d008      	beq.n	8004916 <UART_SetConfig+0x192>
 8004904:	e00f      	b.n	8004926 <UART_SetConfig+0x1a2>
 8004906:	2300      	movs	r3, #0
 8004908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490c:	e06d      	b.n	80049ea <UART_SetConfig+0x266>
 800490e:	2302      	movs	r3, #2
 8004910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004914:	e069      	b.n	80049ea <UART_SetConfig+0x266>
 8004916:	2304      	movs	r3, #4
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491c:	e065      	b.n	80049ea <UART_SetConfig+0x266>
 800491e:	2308      	movs	r3, #8
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004924:	e061      	b.n	80049ea <UART_SetConfig+0x266>
 8004926:	2310      	movs	r3, #16
 8004928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492c:	e05d      	b.n	80049ea <UART_SetConfig+0x266>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a4b      	ldr	r2, [pc, #300]	; (8004a60 <UART_SetConfig+0x2dc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d125      	bne.n	8004984 <UART_SetConfig+0x200>
 8004938:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <UART_SetConfig+0x2d0>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004942:	2bc0      	cmp	r3, #192	; 0xc0
 8004944:	d016      	beq.n	8004974 <UART_SetConfig+0x1f0>
 8004946:	2bc0      	cmp	r3, #192	; 0xc0
 8004948:	d818      	bhi.n	800497c <UART_SetConfig+0x1f8>
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d00a      	beq.n	8004964 <UART_SetConfig+0x1e0>
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d814      	bhi.n	800497c <UART_SetConfig+0x1f8>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <UART_SetConfig+0x1d8>
 8004956:	2b40      	cmp	r3, #64	; 0x40
 8004958:	d008      	beq.n	800496c <UART_SetConfig+0x1e8>
 800495a:	e00f      	b.n	800497c <UART_SetConfig+0x1f8>
 800495c:	2300      	movs	r3, #0
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004962:	e042      	b.n	80049ea <UART_SetConfig+0x266>
 8004964:	2302      	movs	r3, #2
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496a:	e03e      	b.n	80049ea <UART_SetConfig+0x266>
 800496c:	2304      	movs	r3, #4
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e03a      	b.n	80049ea <UART_SetConfig+0x266>
 8004974:	2308      	movs	r3, #8
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e036      	b.n	80049ea <UART_SetConfig+0x266>
 800497c:	2310      	movs	r3, #16
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e032      	b.n	80049ea <UART_SetConfig+0x266>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <UART_SetConfig+0x2c8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d12a      	bne.n	80049e4 <UART_SetConfig+0x260>
 800498e:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <UART_SetConfig+0x2d0>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800499c:	d01a      	beq.n	80049d4 <UART_SetConfig+0x250>
 800499e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a2:	d81b      	bhi.n	80049dc <UART_SetConfig+0x258>
 80049a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a8:	d00c      	beq.n	80049c4 <UART_SetConfig+0x240>
 80049aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ae:	d815      	bhi.n	80049dc <UART_SetConfig+0x258>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <UART_SetConfig+0x238>
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b8:	d008      	beq.n	80049cc <UART_SetConfig+0x248>
 80049ba:	e00f      	b.n	80049dc <UART_SetConfig+0x258>
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c2:	e012      	b.n	80049ea <UART_SetConfig+0x266>
 80049c4:	2302      	movs	r3, #2
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ca:	e00e      	b.n	80049ea <UART_SetConfig+0x266>
 80049cc:	2304      	movs	r3, #4
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d2:	e00a      	b.n	80049ea <UART_SetConfig+0x266>
 80049d4:	2308      	movs	r3, #8
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049da:	e006      	b.n	80049ea <UART_SetConfig+0x266>
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e2:	e002      	b.n	80049ea <UART_SetConfig+0x266>
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <UART_SetConfig+0x2c8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	f040 808b 	bne.w	8004b0c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d834      	bhi.n	8004a68 <UART_SetConfig+0x2e4>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x280>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a69 	.word	0x08004a69
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a37 	.word	0x08004a37
 8004a18:	08004a69 	.word	0x08004a69
 8004a1c:	08004a69 	.word	0x08004a69
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7fe fd3e 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	61f8      	str	r0, [r7, #28]
        break;
 8004a2e:	e021      	b.n	8004a74 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <UART_SetConfig+0x2e0>)
 8004a32:	61fb      	str	r3, [r7, #28]
        break;
 8004a34:	e01e      	b.n	8004a74 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fe fc9f 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004a3a:	61f8      	str	r0, [r7, #28]
        break;
 8004a3c:	e01a      	b.n	8004a74 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	61fb      	str	r3, [r7, #28]
        break;
 8004a44:	e016      	b.n	8004a74 <UART_SetConfig+0x2f0>
 8004a46:	bf00      	nop
 8004a48:	efff69f3 	.word	0xefff69f3
 8004a4c:	40008000 	.word	0x40008000
 8004a50:	40013800 	.word	0x40013800
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40004400 	.word	0x40004400
 8004a5c:	40004800 	.word	0x40004800
 8004a60:	40004c00 	.word	0x40004c00
 8004a64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80fa 	beq.w	8004c70 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d305      	bcc.n	8004a98 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d903      	bls.n	8004aa0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a9e:	e0e7      	b.n	8004c70 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	461c      	mov	r4, r3
 8004aa6:	4615      	mov	r5, r2
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	022b      	lsls	r3, r5, #8
 8004ab2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ab6:	0222      	lsls	r2, r4, #8
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	6849      	ldr	r1, [r1, #4]
 8004abc:	0849      	lsrs	r1, r1, #1
 8004abe:	2000      	movs	r0, #0
 8004ac0:	4688      	mov	r8, r1
 8004ac2:	4681      	mov	r9, r0
 8004ac4:	eb12 0a08 	adds.w	sl, r2, r8
 8004ac8:	eb43 0b09 	adc.w	fp, r3, r9
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ada:	4650      	mov	r0, sl
 8004adc:	4659      	mov	r1, fp
 8004ade:	f7fb fb81 	bl	80001e4 <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af0:	d308      	bcc.n	8004b04 <UART_SetConfig+0x380>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af8:	d204      	bcs.n	8004b04 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	e0b5      	b.n	8004c70 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b0a:	e0b1      	b.n	8004c70 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b14:	d15d      	bne.n	8004bd2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d827      	bhi.n	8004b6e <UART_SetConfig+0x3ea>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <UART_SetConfig+0x3a0>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b59 	.word	0x08004b59
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b5f 	.word	0x08004b5f
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b6f 	.word	0x08004b6f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fe fcae 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	61f8      	str	r0, [r7, #28]
        break;
 8004b4e:	e014      	b.n	8004b7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b50:	f7fe fcc0 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004b54:	61f8      	str	r0, [r7, #28]
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <UART_SetConfig+0x508>)
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe fc0b 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004b62:	61f8      	str	r0, [r7, #28]
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d077      	beq.n	8004c70 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	005a      	lsls	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b0f      	cmp	r3, #15
 8004b9a:	d916      	bls.n	8004bca <UART_SetConfig+0x446>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d212      	bcs.n	8004bca <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f023 030f 	bic.w	r3, r3, #15
 8004bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	8afb      	ldrh	r3, [r7, #22]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	8afa      	ldrh	r2, [r7, #22]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e052      	b.n	8004c70 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bd0:	e04e      	b.n	8004c70 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d827      	bhi.n	8004c2a <UART_SetConfig+0x4a6>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x45c>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c2b 	.word	0x08004c2b
 8004c00:	08004c23 	.word	0x08004c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fe fc50 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004c08:	61f8      	str	r0, [r7, #28]
        break;
 8004c0a:	e014      	b.n	8004c36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c0c:	f7fe fc62 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004c10:	61f8      	str	r0, [r7, #28]
        break;
 8004c12:	e010      	b.n	8004c36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <UART_SetConfig+0x508>)
 8004c16:	61fb      	str	r3, [r7, #28]
        break;
 8004c18:	e00d      	b.n	8004c36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7fe fbad 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004c1e:	61f8      	str	r0, [r7, #28]
        break;
 8004c20:	e009      	b.n	8004c36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c26:	61fb      	str	r3, [r7, #28]
        break;
 8004c28:	e005      	b.n	8004c36 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c34:	bf00      	nop
    }

    if (pclk != 0U)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d019      	beq.n	8004c70 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	085a      	lsrs	r2, r3, #1
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	441a      	add	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d909      	bls.n	8004c6a <UART_SetConfig+0x4e6>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5c:	d205      	bcs.n	8004c6a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e002      	b.n	8004c70 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3728      	adds	r7, #40	; 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de4:	f7fb ffd4 	bl	8000d90 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d10e      	bne.n	8004e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f82d 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e023      	b.n	8004e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d10e      	bne.n	8004e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f817 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e00d      	b.n	8004e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b09c      	sub	sp, #112	; 0x70
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e76:	e0a5      	b.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	f000 80a1 	beq.w	8004fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fb ff85 	bl	8000d90 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d13e      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eac:	667b      	str	r3, [r7, #100]	; 0x64
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e6      	bne.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eea:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e067      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d04f      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d147      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e6      	bne.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f90:	623a      	str	r2, [r7, #32]
 8004f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e010      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	f43f af4a 	beq.w	8004e78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3770      	adds	r7, #112	; 0x70
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <__libc_init_array>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4d0d      	ldr	r5, [pc, #52]	; (8005028 <__libc_init_array+0x38>)
 8004ff4:	4c0d      	ldr	r4, [pc, #52]	; (800502c <__libc_init_array+0x3c>)
 8004ff6:	1b64      	subs	r4, r4, r5
 8004ff8:	10a4      	asrs	r4, r4, #2
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	42a6      	cmp	r6, r4
 8004ffe:	d109      	bne.n	8005014 <__libc_init_array+0x24>
 8005000:	4d0b      	ldr	r5, [pc, #44]	; (8005030 <__libc_init_array+0x40>)
 8005002:	4c0c      	ldr	r4, [pc, #48]	; (8005034 <__libc_init_array+0x44>)
 8005004:	f000 f87c 	bl	8005100 <_init>
 8005008:	1b64      	subs	r4, r4, r5
 800500a:	10a4      	asrs	r4, r4, #2
 800500c:	2600      	movs	r6, #0
 800500e:	42a6      	cmp	r6, r4
 8005010:	d105      	bne.n	800501e <__libc_init_array+0x2e>
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	f855 3b04 	ldr.w	r3, [r5], #4
 8005018:	4798      	blx	r3
 800501a:	3601      	adds	r6, #1
 800501c:	e7ee      	b.n	8004ffc <__libc_init_array+0xc>
 800501e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005022:	4798      	blx	r3
 8005024:	3601      	adds	r6, #1
 8005026:	e7f2      	b.n	800500e <__libc_init_array+0x1e>
 8005028:	08005190 	.word	0x08005190
 800502c:	08005190 	.word	0x08005190
 8005030:	08005190 	.word	0x08005190
 8005034:	08005194 	.word	0x08005194

08005038 <__itoa>:
 8005038:	1e93      	subs	r3, r2, #2
 800503a:	2b22      	cmp	r3, #34	; 0x22
 800503c:	b510      	push	{r4, lr}
 800503e:	460c      	mov	r4, r1
 8005040:	d904      	bls.n	800504c <__itoa+0x14>
 8005042:	2300      	movs	r3, #0
 8005044:	700b      	strb	r3, [r1, #0]
 8005046:	461c      	mov	r4, r3
 8005048:	4620      	mov	r0, r4
 800504a:	bd10      	pop	{r4, pc}
 800504c:	2a0a      	cmp	r2, #10
 800504e:	d109      	bne.n	8005064 <__itoa+0x2c>
 8005050:	2800      	cmp	r0, #0
 8005052:	da07      	bge.n	8005064 <__itoa+0x2c>
 8005054:	232d      	movs	r3, #45	; 0x2d
 8005056:	700b      	strb	r3, [r1, #0]
 8005058:	4240      	negs	r0, r0
 800505a:	2101      	movs	r1, #1
 800505c:	4421      	add	r1, r4
 800505e:	f000 f80d 	bl	800507c <__utoa>
 8005062:	e7f1      	b.n	8005048 <__itoa+0x10>
 8005064:	2100      	movs	r1, #0
 8005066:	e7f9      	b.n	800505c <__itoa+0x24>

08005068 <itoa>:
 8005068:	f7ff bfe6 	b.w	8005038 <__itoa>

0800506c <memset>:
 800506c:	4402      	add	r2, r0
 800506e:	4603      	mov	r3, r0
 8005070:	4293      	cmp	r3, r2
 8005072:	d100      	bne.n	8005076 <memset+0xa>
 8005074:	4770      	bx	lr
 8005076:	f803 1b01 	strb.w	r1, [r3], #1
 800507a:	e7f9      	b.n	8005070 <memset+0x4>

0800507c <__utoa>:
 800507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507e:	4c1f      	ldr	r4, [pc, #124]	; (80050fc <__utoa+0x80>)
 8005080:	b08b      	sub	sp, #44	; 0x2c
 8005082:	4605      	mov	r5, r0
 8005084:	460b      	mov	r3, r1
 8005086:	466e      	mov	r6, sp
 8005088:	f104 0c20 	add.w	ip, r4, #32
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	6861      	ldr	r1, [r4, #4]
 8005090:	4637      	mov	r7, r6
 8005092:	c703      	stmia	r7!, {r0, r1}
 8005094:	3408      	adds	r4, #8
 8005096:	4564      	cmp	r4, ip
 8005098:	463e      	mov	r6, r7
 800509a:	d1f7      	bne.n	800508c <__utoa+0x10>
 800509c:	7921      	ldrb	r1, [r4, #4]
 800509e:	7139      	strb	r1, [r7, #4]
 80050a0:	1e91      	subs	r1, r2, #2
 80050a2:	6820      	ldr	r0, [r4, #0]
 80050a4:	6038      	str	r0, [r7, #0]
 80050a6:	2922      	cmp	r1, #34	; 0x22
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	d904      	bls.n	80050b8 <__utoa+0x3c>
 80050ae:	7019      	strb	r1, [r3, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	4618      	mov	r0, r3
 80050b4:	b00b      	add	sp, #44	; 0x2c
 80050b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b8:	1e58      	subs	r0, r3, #1
 80050ba:	4684      	mov	ip, r0
 80050bc:	fbb5 f7f2 	udiv	r7, r5, r2
 80050c0:	fb02 5617 	mls	r6, r2, r7, r5
 80050c4:	3628      	adds	r6, #40	; 0x28
 80050c6:	446e      	add	r6, sp
 80050c8:	460c      	mov	r4, r1
 80050ca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80050ce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80050d2:	462e      	mov	r6, r5
 80050d4:	42b2      	cmp	r2, r6
 80050d6:	f101 0101 	add.w	r1, r1, #1
 80050da:	463d      	mov	r5, r7
 80050dc:	d9ee      	bls.n	80050bc <__utoa+0x40>
 80050de:	2200      	movs	r2, #0
 80050e0:	545a      	strb	r2, [r3, r1]
 80050e2:	1919      	adds	r1, r3, r4
 80050e4:	1aa5      	subs	r5, r4, r2
 80050e6:	42aa      	cmp	r2, r5
 80050e8:	dae3      	bge.n	80050b2 <__utoa+0x36>
 80050ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80050ee:	780e      	ldrb	r6, [r1, #0]
 80050f0:	7006      	strb	r6, [r0, #0]
 80050f2:	3201      	adds	r2, #1
 80050f4:	f801 5901 	strb.w	r5, [r1], #-1
 80050f8:	e7f4      	b.n	80050e4 <__utoa+0x68>
 80050fa:	bf00      	nop
 80050fc:	08005160 	.word	0x08005160

08005100 <_init>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr

0800510c <_fini>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr
